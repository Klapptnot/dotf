#! /bin/env bash
# Installation script
# shellcheck disable=SC1091

# When using the one-line from GitHub (or source <this>)
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
  if ((BASH_VERSINFO[0] < 5)); then
    printf '%s\n' "For bash 4 or less, clone the repo and run the script normally"
    exit 1
  fi
  if [ -d "${HOME}/dotf" ]; then
    if [ -e "${HOME}/dotf" ]; then
      printf '%s\n' "A regular file named \`dotf\` is located in home folder"
    else
      printf '%s\n' "Probably already downloaded, check your home folder"
    fi
    exit 1
  fi
  if ! command -v git &> /dev/null; then
    printf '%s\n' "\`git\` is not installed, install git and try again" >&2
    exit 1
  fi
  printf '%s\n' "Getting files"
  git clone --depth=1 https://github.com/Klapptnot/dotf.git "${HOME}/dotf"
  printf '%s\n' "Starting install"
  set -- install
  BASH_ARGV0="${HOME}/dotf/dotf"
fi

source ./.config/bash/lib/barg.sh || exit
source ./.config/bash/lib/printfc.sh || exit
source ./.config/bash/lib/logger.sh || exit

main() {
  MEPATH="$(realpath "${0}")"
  MELOC="$(dirname "${MEPATH}")"
  MENAME="$(basename "${MEPATH}")"

  cd "${MELOC}" || exit 1

  barg.parse "${@}" << BARG || {
  #[progname="DOTF", subcmdr='true']
  #[subcmds="install uninstall help config version"]
  @install {
    h/help => "help"
    r/reset => "reset"
    u/update => "update"
  } |> "normal" => INSTALL_MODE
  @install g/geoinf[str] => USER_GEOINFO
  @install I/no-pkgs[bool] => NO_INSTALL_PKGS
  f/force[bool] => FORCE_OPERATION
BARG
    printf '%s\n' "See help, run \`${MENAME} help\`"
    exit 1
  }

  ${FORCE_OPERATION} && log i "Any operation can be forced"

  ignore=()
  pacman_pkgs=()
  yay_pkgs=()
  needed_folders=()

  # Installation config
  source "${MELOC}/.conf.sh"

  case "${BARG_SUBCOMMAND}" in
    install)
      if [[ "${INSTALL_MODE}" =~ ^(reset|update)$ ]]; then
        printfc '{fgc.87}All local changes will be discarded, continue anyways?{r} [Yn]: '
        read -r -n 1 REPLY
        echo
        if ! [[ "${REPLY}" =~ ^(Y|y)$ ]]; then
          log i "Cancelled by user"
          exit
        fi
      fi
      do_install
      ;;
    uninstall) do_uninstall ;;
    config)
      if ! command -v nvim &> /dev/null; then
        log e "Neovim not installed or not in PATH"
        exit
      fi
      nvim "${MELOC}/.conf.sh"
      ;;
    help) do_help ;;
    version)
      {
        read -r new_commits
        read -r remote_version
        read -r local_version
      } < <(git_version_gen)

      printf '%s %s\n' "Klapptnot/dotf" "${local_version}"
      if ((new_commits > 0)); then
        printf '\n%s\n' "Updates available (${remote_version}), to update run \`${MENAME} install --update\`"
      fi
      ;;
  esac
}

do_help() {
  local help=(
    '{fgc.87}dotf{r} - A simple script to manage dotfiles\n\n'
    '\x1b[4mUsage:\x1b[24m\n'
    '  {fgc.84}dotf{r} <{fgc.219}subcommand{r}> [{fgc.96}options{r}]\n\n'
    '  install [{fgc.96}options{r}]  - Install all dotfiles\n'
    '  uninstall          - Uninstall all dotfiles\n'
    '  config             - Open the configuration file (neovim)\n'
    '  help               - Show this message and exit\n'
    '  version            - Show version, check updates and exit\n\n'
    '\x1b[4mNotes:\x1b[24m\n'
    'The script will detect the installed applications and configure them accordingly.\n'
    'You can customize the installation process by editing the config file.\n\n'
    '\x1b[4mSupported shells:\x1b[24m\n'
    '  bash, nushell, fish, zsh\n'
    '\x1b[4mSupported DEs:\x1b[24m\n'
    '  Hyprland\n'
  )
  local help_install=(
    '\x1b[4mUsage:\x1b[24m\n'
    '  {fgc.84}dotf{r} {fgc.219}install{r} [{fgc.96}options{r}]\n\n'
    '  install [{fgc.96}options{r}]  - Install all dotfiles\n'
    '    -h, --help              Show this message and exit\n'
    '    -r, --reset             Reset the dotfiles installation\n'
    '    -u, --update            Update the dotfiles\n'
    '    -g, --geoinf <loc>      Your city and country name, for weather info\n'
    '    -I, --no-pkgs           Skip packages installation process\n\n'
    '\x1b[4mNotes:\x1b[24m\n'
    'Run `''dotf install -I` to update linked files after manual package additions.\n'
    'Use `''-f` to force linking, replacing existing files with links in the config path.'
  )

  if [ "${1}" == "install" ]; then
    printfc "${help_install[*]}"
  else
    printfc "${help[*]}"
  fi
  exit
}

do_symlink_cleaning() {
  local source="${1}"
  local target="${2}"

  mapfile -t broken_links < <(find "${target}" -type l ! -exec test -e {} ';' -print)
  local linked_to=()
  for l in "${!broken_links[@]}"; do
    read -r linked_to_ < <(realpath -LP "${broken_links[l]}" 2> /dev/null)
    linked_to[l]="${linked_to_}"
  done

  local cleaned=()
  for ((i = 0; i < ${#broken_links[@]}; i++)); do
    if [ -z "${linked_to[i]}" ] || [[ "${linked_to[i]}" == "${MELOC}"* ]]; then
      unlink "${broken_links[i]}"
      cleaned+=("${broken_links[i]}")
    fi
  done

  ((${#cleaned[@]} > 0)) && log i 'Cleaned (%s) broken links' "${#cleaned[@]}"
}

do_symlink_tree() {
  local source="${1}"
  local target="${2}"

  if [[ ! -d "${target}" ]]; then
    mkdir -p "${target}"
  fi

  local find_args=(! -path "'${source}'")
  # Generate ignore for find
  for it in "${ignore[@]}"; do
    find_args+=(! -path "'${source}/${it}'")
  done

  eval "find ${source} ${find_args[*]} -type d" | while read -r line; do
    local f="${target}/${line#"${source}"/}"
    if [ ! -d "${f}" ]; then
      mkdir -p "${f}"
    fi
  done

  eval "find ${source} ${find_args[*]} -type f" | while read -r line; do
    local f="${target}/${line#"${source}"/}"
    if [ -e "${f}" ]; then
      if [ -L "${f}" ]; then
        unlink "${f:?}"
      else ${FORCE_OPERATION} && rm -fr "${f:?}"; fi
    fi
    ln -s "${line}" "${f}"
  done
}

do_install() {
  if [ "${INSTALL_MODE}" == "help" ]; then
    do_help install
  fi

  if [ "${INSTALL_MODE}" == "update" ]; then
    cd "${MELOC}" || exit
    if ! git_version_gen > /dev/null; then
      log i "Already up to date"
      return
    fi
    log w "All local changes will be discarded"
    git restore "${MELOC}" &> /dev/null &&
      git pull --force &> /dev/null &&
      log i "Successfully pulled new changes"
    # Source config for updates
    source "${MELOC}/.conf.sh"
  elif [ "${INSTALL_MODE}" == "reset" ]; then
    log w "All local changes were discarded"
    cd "${MELOC}" || exit
    git restore "${MELOC}"
    return
  fi

  ${NO_INSTALL_PKGS} && log i "User rejected packages installation"

  if ! ${NO_INSTALL_PKGS}; then
    log i "Installing packages with pacman"
    # Install packages
    sudo pacman -Syy --noconfirm --needed "${pacman_pkgs[@]}"

    # Install Yet Another Yogurt
    ! command -v yay > /dev/null && {
      log i "Yay is not installed, installing"
      local here="${PWD}"
      local yay_folder
      yay_folder="$(mktemp --directory)"
      git clone https://aur.archlinux.org/yay.git "${yay_folder}" &&
        cd "${yay_folder}" &&
        makepkg -si
      cd "${here}" || exit
      rm -rf "${yay_folder:?Path expected}"
    }

    log i "Installing AUR packages with yay"
    # Install yay packages
    yay -Syy --answerclean All --answerdiff None --noconfirm --needed "${yay_pkgs[@]}"
  fi

  log i "Started linking process"

  # Generate ignore list with updated packages
  gen_ignore_list

  # Clean posible outdated links
  do_symlink_cleaning "${MELOC}" "${HOME}"

  # Make symlinks to files
  do_symlink_tree "${MELOC}" "${HOME}"

  # Create needed folders
  for f in "${needed_folders[@]}"; do
    mkdir -p "${f}"
  done

  # Run post install commands
  post_install

  log i "Installation process finished"
}

do_uninstall() {
  # Unlink files linked to this folder and remove
  # folders that are left empty after unlink process

  log i "Uninstallation Started"
  local folders=()

  mapfile -t link < <(find "${HOME}" -type l)
  mapfile -t targ < <(realpath -LP "${link[@]}")
  for ((i = 0; i < ${#link[@]}; i++)); do
    [[ "${targ[i]}" != "${MELOC}"* ]] && continue
    unlink "${link[i]}"
    folders+=("${link[i]}")
  done
  ((${#folders[@]} == 0)) && return

  mapfile -t folders < <(dirname "${folders[@]}" | uniq | sort -r | uniq)

  local to_remove=()
  for f in "${folders[@]}"; do
    [[ "${f}" =~ ^${HOME}/?(\.config|\.local)?$ ]] && continue
    to_remove+=("${f}")
  done

  # Remove folders, will remove empty folders and
  # ignore errors, `--preserve-root` just in case
  local res
  if res=$(rm --preserve-root -df "${to_remove[@]}" 2>&1 | sed "s/^.*'\(.*\)'.*$/\1/g"); then
    mapfile -t not_rm <<< "${res}"
    log w "Some folders (${#not_rm[@]}) have untracked files. Not removed"
  else
    echo "Something wrong happenned while removing the folders"
  fi

  log i "Uninstallation process finished"
}

# shellcheck disable=SC2155
git_version_gen() {
  git fetch &> /dev/null
  read -r remote < <(git rev-parse --abbrev-ref --symbolic-full-name '@{u}')

  read -r local_c < <(git rev-list --count HEAD)
  read -r local_h < <(git rev-parse HEAD)
  read -r remote_c < <(git rev-list --count "${remote}")
  read -r remote_h < <(git rev-parse "${remote}")

  read -r merge_base < <(git merge-base "${remote_h}" "${local_h}")
  read -r new_commits < <(git rev-list --count "${merge_base}".."${remote_h}")

  printf '%d\n%s\n%s\n' "${new_commits}" "${remote_c}-${remote_h:0:7}" "${local_c}-${local_h:0:7}"
  ((new_commits > 0)) && return 0 || return 1
}

main "${@}"
