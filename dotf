#!/usr/bin/bash
# Installation script
# shellcheck disable=SC1091

# When using the one-line from GitHub (or source <this>)
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
  if ((BASH_VERSINFO[0] < 5)); then
    printf '%s\n' "For bash 4 or less, clone the repo and run the script normally"
    printf '$ git clone --depth=1 https://github.com/Klapptnot/dotf.git "%s/repos/dotf"' "${HOME}"
    printf '$ %s\n' "cd ${HOME}/repos/dotf" "bash ./dotf dotf install"
    exit 1
  fi
  if [ -d "${HOME}/dotf" ]; then
    if [ -e "${HOME}/dotf" ]; then
      printf '%s\n' "A regular file named \`dotf\` is located in home folder"
    else
      printf '%s\n' "Probably already downloaded, check your home folder"
    fi
    exit 1
  fi
  if ! command -v git &> /dev/null; then
    printf '%s\n' "\`git\` is not installed, install git and try again" >&2
    exit 1
  fi
  [ ! -d "${HOME}/repos/dotf" ] && {
    mkdir -p "${HOME}/repos/dotf" || {
      printf '%s\n' "Could not create needed folders" >&2
      exit 1
    }
  }
  printf '%s\n' "Getting files"
  git clone --depth=1 https://github.com/Klapptnot/dotf.git "${HOME}/repos/dotf"
  printf '%s\n' "Starting install"
  set -- install
  BASH_ARGV0="${HOME}/repos/dotf/dotf"
fi

source ./.config/bash/lib/barg.sh || exit
source ./.config/bash/lib/printfc.sh || exit
source ./.config/bash/lib/logger.sh || exit
source ./.config/bash/lib/spinner.sh || exit

function main {
  read -r _ extglob_s < <(shopt extglob)
  [ "${extglob_s}" == 'off' ] && shopt -s extglob

  MEPATH="$(realpath "${0}")"
  MELOC="$(dirname "${MEPATH}")"
  MENAME="$(basename "${MEPATH}")"

  cd "${MELOC}" || exit 1

  barg.parse "${@}" << BARG || {
  #[progname="DOTF", subcmdr='true']
  #[subcmds="install uninstall help backgrounds config version"]
  #[extras='EXTRA_PARAMS']
  @install {
    h/help => "help"
    r/reset => "reset"
    u/update => "update"
  } |> "normal" => INSTALL_MODE
  @install g/geoinf[str] => INSTALL_USER_GEOINFO
  @install n/no-pkgs[bool] => INSTALL_NO_PKGS

  ! @backgrounds {
    h/help => "help"
    l/list => "list"
    g/get => "download"
    r/remove => "remove"
  } |> "list" => BGM_MODE
  @backgrounds i/index[str] |> "${HOME}/.config/dotf/backgrounds.yaml" => BGM_INDEX_FILE
  @backgrounds d/bgmdir[str] |> "${HOME}/.local/share/backgrounds" => BGM_MAIN_FOLDER
  @backgrounds a/all[bool] => BGM_ALL_GROUPS

  f/force[bool] => FORCE_OPERATION
BARG
    printf '%s\n' "See help, run \`${MENAME} help\`"
    exit 1
  }

  ${FORCE_OPERATION} && log w "Any operation can be forced"

  ignore=()
  pacman_pkgs=()
  yay_pkgs=()
  needed_folders=()

  # Installation config
  source "${MELOC}/.iconf.sh"

  case "${BARG_SUBCOMMAND}" in
    install)
      if [[ "${INSTALL_MODE}" =~ ^(reset|update)$ ]]; then
        printfc '{f87}All local changes will be discarded, continue anyways?{r} [Yn]: '
        read -r -n 1 REPLY
        echo
        if ! [[ "${REPLY}" =~ ^(Y|y)$ ]]; then
          log i "Cancelled by user"
          exit
        fi
      fi
      set_up_dotf
      ;;
    uninstall) remove_dotf ;;
    config)
      if ! command -v nvim &> /dev/null; then
        log e "Neovim not installed or not in PATH"
        exit
      fi
      nvim "${MELOC}/.iconf.sh"
      ;;
    help) print_help_info "${EXTRA_PARAMS[@]}" ;;
    backgrounds) backgrounds_manager ;;
    version)
      spinner.start "Gathering info from remote repo" &
      SPINNER_PID="${!}"
      {
        read -r new_commits
        read -r remote_version
        read -r local_version
      } < <(git_version_gen)
      spinner.stop "${SPINNER_PID}"

      printf '%s %s\n' "Klapptnot/dotf" "${local_version}"
      if ((new_commits > 0)); then
        printf '\n%s\n' "Updates available (${remote_version}), to update run \`${MENAME} install --update\`"
      fi
      ;;
  esac
  [ "${extglob_s}" == 'off' ] && shopt -u extglob
  return 0
}

function print_help_info {
  local help=(
    '{f12}dotf{r}: Setup manager, simple\n\n'
    '{f12}Usage{r}:\n'
    '  {f14}dotf{r} <{f2}subcommand{r}> [{f248}options{r}]\n\n'
    '  install     [{f248}options{r}]  Set up dotf for this user\n'
    '  backgrounds [{f248}options{r}]  Manage backgrounds\n'
    '  uninstall              Remove dotf setup\n'
    '  config                 Open the configuration file (neovim)\n'
    '  help                   Show this message and exit\n'
    '  version                Show version, check updates and exit\n\n'
    '{f12}Notes{r}:\n'
    '  The script will detect the installed applications and configure them accordingly.\n'
    '  You can customize the installation process by editing the config file.\n\n'
    '{f12}Supported shells{r}:\n'
    '  bash, nushell, fish, zsh\n'
    '{f12}Supported DEs{r}:\n'
    '  Hyprland\n\n'
    'By {f99}Klapptnot{r} {f117}https://github.com/Klapptnot{r}'
  )
  local help_install=(
    '{f12}dotf{r} {f2}install{r}: Set up dotf for this user\n\n'
    '{f12}Usage{r}:\n'
    '  {f14}dotf{r} {f2}install{r} [{f248}options{r}]\n\n'
    '{f12}Options{r}:\n'
    '  -h, --help              Show this message and exit\n'
    '  -r, --reset             Reset the dotfiles installation\n'
    '  -u, --update            Update the dotfiles\n'
    '  -n, --no-pkgs           Skip packages installation process\n'
    '  -g, --geoinf \x1b[38;5;15m<str>\x1b[0m      Your city and country name, for weather info\n\n'
    '{f12}Notes{r}:\n'
    '  Run `''dotf install -n` to update linked files after manual package additions.\n'
    '  Use `''-f` to force linking, replacing existing files with links in the config path.'
  )
  local help_backgrounds=(
    '{f12}dotf{r} {f2}backgrounds{r}: Manage backgrounds\n\n'
    '{f12}Usage{r}:\n'
    '  {f14}dotf{r} {f2}backgrounds{r} [{f248}options{r}]\n\n'
    '{f12}Options{r}:\n'
    '  -h, --help              Show this message and exit\n'
    '  -l, --list              List groups available\n'
    '  -r, --remove            Remove the downloaded backgrounds group\n'
    '  -g, --get               Download the backgrounds group\n'
    '  -i, --index \x1b[38;5;15m<path>\x1b[0m      Use a different backgrounds index\n'
    '  -d, --bgmdir \x1b[38;5;15m<path>\x1b[0m     Where to save or manage backgrounds\n\n'
    '{f12}Notes{r}:\n'
    '  Backgrounds are saved under: {f87}~/.local/share/backgrounds{r} folder by default.\n'
    '  Use `''-f` to force redownloading existing files, overwriting them.'
  )

  case "${1}" in
    install)
      IFS= help_message="${help_install[*]}"
      printfc "${help_message}"
      ;;
    backgrounds)
      IFS= help_message="${help_backgrounds[*]}"
      printfc "${help_message}"
      ;;
    *)
      [ -n "${1}" ] && log e 'Unknown subcommand: %s' "${1}"
      IFS= help_message="${help[*]}"
      printfc "${help_message}"
      ;;
  esac
  exit
}

function do_symlink_cleaning {
  local source="${1}"
  local target="${2}"

  mapfile -t broken_links < <(find "${target}" -type l ! -exec test -e {} ';' -print 2> /dev/null)
  local linked_to=()
  for l in "${!broken_links[@]}"; do
    read -r linked_to_ < <(realpath -LP "${broken_links[l]}" 2> /dev/null)
    linked_to[l]="${linked_to_}"
  done

  local cleaned=()
  for ((i = 0; i < ${#broken_links[@]}; i++)); do
    if [ -z "${linked_to[i]}" ] || [[ "${linked_to[i]}" == "${MELOC}"* ]]; then
      unlink "${broken_links[i]}"
      cleaned+=("${broken_links[i]}")
    fi
  done

  ((${#cleaned[@]} > 0)) && log i 'Cleaned (%s) broken links' "${#cleaned[@]}"
}

function do_symlink_tree {
  local source="${1}"
  local target="${2}"

  if [[ ! -d "${target}" ]]; then
    mkdir -p "${target}"
  fi

  local find_args=(! -path "'${source}'")
  # Generate ignore for find
  for it in "${ignore[@]}"; do
    find_args+=(! -path "'${source}/${it}'")
  done

  eval "find ${source} ${find_args[*]} -type d" | while read -r line; do
    local f="${target}/${line#"${source}"/}"
    if [ ! -d "${f}" ]; then
      mkdir -p "${f}"
    fi
  done

  eval "find ${source} ${find_args[*]} -type f" | while read -r line; do
    local f="${target}/${line#"${source}"/}"
    if [ -e "${f}" ]; then
      if [ -L "${f}" ]; then
        unlink "${f:?}"
      else ${FORCE_OPERATION} && rm -fr "${f:?}"; fi
    fi
    ln -s "${line}" "${f}"
  done
}

function backgrounds_manager {
  if [ "${BGM_MODE}" == "help" ]; then
    print_help_info backgrounds
  fi

  if ! command -v yq &> /dev/null; then
    log e 'Command `''yq` is required, install it first'
    return 1
  fi

  if [ ! -e "${BGM_MAIN_FOLDER}" ] || [ ! -d "${BGM_MAIN_FOLDER}" ]; then
    log e 'Main folder does not exist or is inaccessible'
    return 1
  fi

  if [ ! -e "${BGM_INDEX_FILE}" ] || [ ! -f "${BGM_INDEX_FILE}" ]; then
    log e 'Index file does not exist or is inaccessible'
    return 1
  fi

  if ! ${BGM_ALL_GROUPS} && ((EXTRA_PARAMS_COUNT < 1)); then
    log e 'Pass group names as arguments, or pass the `''--all` flag'
    return 1
  fi

  mapfile -t __groups < <(yq -rM .__groups[] "${BGM_INDEX_FILE}")

  if ! ${BGM_ALL_GROUPS}; then
    for ((i = 0; i < EXTRA_PARAMS_COUNT; i++)); do
      if ! item_is_in_arr "${EXTRA_PARAMS[i]}" "${__groups[@]}"; then
        log e 'The group "%s" does not exist' "${EXTRA_PARAMS[i]}"
      fi
    done
  fi

  case "${BGM_MODE}" in
    list)
      local lines=()
      for grp in "${__groups[@]}"; do
        if ! ${BGM_ALL_GROUPS} && ! item_is_in_arr "${grp}" "${EXTRA_PARAMS[@]}"; then
          continue
        fi
        mapfile -t it_name < <(yq -rM ".${grp}[] | .name" "${BGM_INDEX_FILE}")
        local total="${#it_name[@]}"
        local downloaded=0
        for name in "${it_name[@]}"; do
          [ -e "${BGM_MAIN_FOLDER}/${name}" ] && ((downloaded++))
        done
        lines+=("${grp}" "${downloaded}/${total}")
      done
      printf '%-20s %7s background(s) downloaded\n' "${lines[@]}"
      ;;
    download)
      declare -A gtotl=()
      for grp in "${__groups[@]}"; do
        if ! ${BGM_ALL_GROUPS} && ! item_is_in_arr "${grp}" "${EXTRA_PARAMS[@]}"; then
          continue
        fi
        mapfile -t it_name < <(yq -rM ".${grp}[] | .name" "${BGM_INDEX_FILE}")
        mapfile -t it_link < <(yq -rM ".${grp}[] | .link" "${BGM_INDEX_FILE}")
        local item_count="${#it_link[@]}"
        local spin_count="${item_count}"
        local skipped=0
        gtotl["${grp}"]=0

        for ((i = 0; i < item_count; i++)); do
          spinner.start "Downloading $((i - skipped))/${spin_count} files..." &
          SPINNER_PID=${!}
          if [ -e "${BGM_MAIN_FOLDER}/${it_name[i]}" ]; then
            if ! ${FORCE_OPERATION}; then
              log d 'File found, skipping %s' "${it_name[i]}"
              ((spin_count--))
              ((skipped++))
              ((spin_count = item_count - skipped))
              spinner.stop "${SPINNER_PID}"
              continue
            fi
            log i 'File found, removing %s' "${it_name[i]}"
            rm "${BGM_MAIN_FOLDER:?}/${it_name[i]}" || continue
          fi
          log d 'Downloading %s...' "${it_name[i]}"
          if wget -P "${BGM_MAIN_FOLDER}" "${it_link[i]}" &> /dev/null; then
            gtotl["${grp}"]=$((${gtotl["${grp}"]} + 1))
            log d 'Downloaded successfully %s' "${it_name[i]}"
          else
            log e 'Failed to download %s' "${it_name[i]}"
          fi
          spinner.stop "${SPINNER_PID}"
        done
        gtotl["${grp}"]="${gtotl["${grp}"]}/$((item_count - skipped))"
      done

      for grp in "${!gtotl[@]}"; do
        log i 'Group %s: %s downloaded' "${grp}" "${gtotl["${grp}"]}"
      done
      ;;
    remove)
      local total_rmed=0
      for grp in "${__groups[@]}"; do
        if ! ${BGM_ALL_GROUPS} && ! item_is_in_arr "${grp}" "${EXTRA_PARAMS[@]}"; then
          continue
        fi
        mapfile -t it_name < <(yq -rM ".${grp}[] | .name" "${BGM_INDEX_FILE}")
        local item_count="${#it_name[@]}"

        for ((i = 0; i < item_count; i++)); do
          if [ -e "${BGM_MAIN_FOLDER}/${it_name[i]}" ]; then
            log d 'Removing %s' "${it_name[i]}"
            rm "${BGM_MAIN_FOLDER:?}/${it_name[i]}" || continue
            ((total_rmed++))
          fi
        done
      done
      log i "Removed %d files" "${total_rmed}"
      ;;
    help)
      print_help_info backgrounds
      ;;
  esac
  return
}

function set_up_dotf {
  if [ "${INSTALL_MODE}" == "help" ]; then
    print_help_info install
  fi

  if [ "${INSTALL_MODE}" == "update" ]; then
    cd "${MELOC}" || exit
    if ! git_version_gen > /dev/null; then
      log i "Already up to date"
      return
    fi
    spinner.start "Updating files" &
    SPINNER_PID="${!}"
    git restore "${MELOC}" &> /dev/null &&
      git pull --rebase &> /dev/null &&
      log i "Successfully pulled new changes"
    # Source config for updates
    source "${MELOC}/.iconf.sh"
    spinner.stop "${SPINNER_PID}"
  elif [ "${INSTALL_MODE}" == "reset" ]; then
    log w "All local changes were discarded"
    cd "${MELOC}" || exit
    git restore "${MELOC}"
    return
  fi

  ${INSTALL_NO_PKGS} && log i "User rejected packages installation"

  if ! ${INSTALL_NO_PKGS} && [ -z "${TERMUX_APP__PACKAGE_NAME@A}" ]; then
    log i "Installing packages with pacman"
    # Install packages
    sudo pacman -Syy --noconfirm --needed "${pacman_pkgs[@]}"

    # Install Yet Another Yogurt
    ! command -v yay > /dev/null && {
      log i "Yay is not installed, installing"
      spinner.start "Installing yay (Yet Another Yogurt)" &
      SPINNER_PID="${!}"
      local here="${PWD}"
      local yay_folder
      yay_folder="$(mktemp --directory)"
      git clone https://aur.archlinux.org/yay.git "${yay_folder}" &&
        cd "${yay_folder}" &&
        makepkg -si
      cd "${here}" || exit
      rm -rf "${yay_folder:?Path expected}"
    }
    spinner.stop "${SPINNER_PID}"

    log i "Installing AUR packages with yay"
    # Install yay packages
    yay -Syy --answerclean All --answerdiff None --noconfirm --needed "${yay_pkgs[@]}"
  fi

  log i "Started linking process"

  spinner.start "Generating ignore list" &
  SPINNER_PID="${!}"
  # Generate ignore list with updated packages
  gen_ignore_list
  spinner.stop "${SPINNER_PID}"

  spinner.start "Cleaning symbolic links" &
  SPINNER_PID="${!}"
  # Clean posible outdated links
  do_symlink_cleaning "${MELOC}" "${HOME}"
  spinner.stop "${SPINNER_PID}"

  spinner.start "Linking files" &
  SPINNER_PID="${!}"
  # Make symlinks to files
  do_symlink_tree "${MELOC}" "${HOME}"
  spinner.stop "${SPINNER_PID}"

  spinner.start "Creating needed folders" &
  SPINNER_PID="${!}"
  # Create needed folders
  for f in "${needed_folders[@]}"; do
    mkdir -p "${f}"
  done
  spinner.stop "${SPINNER_PID}"

  spinner.start "Running post-install function" &
  SPINNER_PID="${!}"
  # Run post install commands
  post_install
  spinner.stop "${SPINNER_PID}"

  log i "Installation process finished"
}

function remove_dotf {
  # Unlink files linked to this folder and remove
  # folders that are left empty after unlink process

  log i "Uninstallation Started"
  local folders=()

  spinner.start "Unlinking owned files..." &
  SPINNER_PID="${!}"
  mapfile -t link < <(find "${HOME}" -type l)
  for ((i = 0; i < ${#link[@]}; i++)); do
    read -r targ < <(realpath -LP "${link[i]}" 2> /dev/null)
    [[ "${targ}" != "${MELOC}"* ]] && continue
    folders+=("${link[i]}")
    [[ -z "${targ}" ]] && continue
    unlink "${link[i]}"
  done
  spinner.stop "${SPINNER_PID}"

  ((${#folders[@]} == 0)) && return
  mapfile -t folders < <(dirname "${folders[@]}" | uniq | sort -r | uniq)

  spinner.start "Cleaning created folders..." &
  SPINNER_PID="${!}"
  local not_empty=()
  for ff in "${folders[@]}"; do
    local f="${ff}"
    while true; do
      [[ "${f}" == "${HOME}" ]] && break
      [[ "${f}" == "${HOME}/.local" ]] && break
      [[ "${f}" == "${HOME}/.config" ]] && break
      if ! rm --dir "${f:?}" 2> /dev/null; then
        [ -e "${f}" ] && not_empty+=("${f}")
        break
      fi
      f="${f%\/*}" # Pop last dir
    done
  done
  spinner.stop "${SPINNER_PID}"
  mapfile -t not_empty < <(for f in "${not_empty[@]}"; do
    [ -e "${f}" ] && printf '%s\n' "${f}"
  done | uniq)

  if ((${#not_empty[@]} > 0)); then
    log w 'Some folders (%d) have untracked files.' ${#not_empty[@]}
    log i 'These folders were not removed:'
    printf '  - %s\n' "${not_empty[@]}"
  fi

  log i "Uninstallation process finished"
}

function item_is_in_arr {
  # This works with shopt -s extglob
  local arr=("${@:2}")
  printf -v t '%s' "${arr[@]/#!("${1}")/}"
  test "${#t}" -gt 0
}

# shellcheck disable=SC2155
function git_version_gen {
  git fetch &> /dev/null
  read -r remote < <(git rev-parse --abbrev-ref --symbolic-full-name '@{u}')

  read -r local_c < <(git rev-list --count HEAD)
  read -r local_h < <(git rev-parse HEAD)
  read -r remote_c < <(git rev-list --count "${remote}")
  read -r remote_h < <(git rev-parse "${remote}")

  read -r merge_base < <(git merge-base "${remote_h}" "${local_h}")
  read -r new_commits < <(git rev-list --count "${merge_base}".."${remote_h}")

  printf '%d\n%s\n%s\n' "${new_commits}" "${remote_c}-${remote_h:0:7}" "${local_c}-${local_h:0:7}"
  ((new_commits > 0)) && return 0 || return 1
}

main "${@}"
