#!/usr/bin/env bash
# shellcheck disable=SC2034,SC1090

source ~/.config/bash/lib/logger.sh
source ~/.config/bash/lib/str/markup_unescape.sh
source ~/.config/bash/lib/str/uri_params.sh
source ~/.config/bash/lib/barg.sh

function google_search {
  declare -n request="${1}"

  if [ -z "${!request[*]}" ]; then
    log e 'No request data available, request skipped'
    return 1
  fi

  if ((${#request[query]} < 1)); then
    log e 'Query cannot be empty'
    return 1
  fi

  declare -A google_url_params=()
  google_url_params['q']="${request[query]}"          # Search Query
  google_url_params['udm']=14                         # Only web search results
  google_url_params['num']="${request[g_num]:-10}"    # Amount of results
  google_url_params['start']="${request[g_start]:-0}" # Start from the N result
  google_url_params['dpf']=${request[g_dpf]:-1}       # Results page number

  read -r google_req_url < <(str.uri_params google_url_params)
  google_req_url="https://www.google.com/search?${google_req_url:?}"

  local __success=false
  local __attempts=0
  until [ -n "${ALL_URL_BASE[0]}" ] || [ "${__attempts}" -ge "${request[tries]:-5}" ]; do
    ((__attempts++))
    response_body=$(
      curl -Ss "${google_req_url}" --compressed \
        -H "User-Agent: ${request[user_agent]}" \
        -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' \
        -H 'Accept-Language: en-US,en;q=0.5' \
        -H 'Accept-Encoding: gzip, deflate, br, zstd' \
        -H 'DNT: 1' \
        -H 'Sec-GPC: 1' \
        -H 'Connection: disconnect' \
        -H "Cookie: ${request[cookies]}" \
        -H 'Upgrade-Insecure-Requests: 1' \
        -H 'Sec-Fetch-Dest: document' \
        -H 'Sec-Fetch-Mode: navigate' \
        -H 'Sec-Fetch-Site: none' \
        -H 'Sec-Fetch-User: ?1' \
        -H 'Priority: u=0, i' \
        --max-time "${request[timeout]:-5}" \
        -w '\n%{http_code}' \
        2> >(sed 's/curl: ([0-9]*)/[INFO]/' >&2)
    )
    local http_resp_code="${response_body: -3}"

    [ "${http_resp_code:-000}" == '301' ] && break # MOVED
    [ "${http_resp_code:-000}" == '302' ] && break # CAPTCHA
    [ "${http_resp_code:-000}" == '308' ] && break # MOVED

    if [ "${http_resp_code:-000}" == '200' ]; then
      __success=true
      break
    fi
  done

  if ! ${__success}; then
    case ${http_resp_code} in
      '301' | '308')
        log e 'HTTP %s -> Google [MOVED]. After %d attempts.' "${http_resp_code}" "${__attempts}"
        ;;
      '302')
        log e 'HTTP 302 -> Google [CAPTCHA]. After %d attempts.' "${__attempts}"
        ;;
      *)
        if [ "${__attempts}" -eq "${request[tries]:-5}" ]; then
          log e 'Reached max attempts (%d). Try again or set tries to a greater number.' "${request[tries]:-5}"
        else
          log e 'HTTP %s -> Unexpected code. After %s attempts.' "${http_resp_code}" "${__attempts}"
        fi
        ;;
    esac
    return 1
  fi

  mapfile -t GOOGLE_RESULT_TITLES < <(grep -oP '(?<=<br><h3 class="LC20lb MBeuO DKV0Md">)[^<]*(?=<)' <<< "${response_body}" | str.markup_unescape)
  mapfile -t GOOGLE_RESULT_LINKS < <(grep -oP '(?<=><a jsname="UWckNb" href=")[^ ]*(?=")' <<< "${response_body}")

  declare -g GOOGLE_RESULTS=${#GOOGLE_RESULT_LINKS[@]}
  declare -g GOOGLE_RESULT_TITLES
  declare -g GOOGLE_RESULT_LINKS

  return 0
}

function main {
  local show_usage=false
  barg.parse "${@}" << BARG || show_usage=true
  #[progname='exa']
  #[reqextras='true', extras='QUERY']

  t/timeout[num] |> "5" => EXA_TIMEOUT
  T/tries[int] |> "5" => EXA_TRIES
  c/cookies[str] => EXA_COOKIES
  u/user-agent[str] |> "Mozilla/5.0 (X11; Linux x86_64; rv:132.0) Gecko/20100101 Exa/1.0" => EXA_USER_AGENT
  a/amount[int] |> "10" => EXA_RESULT_AMOUNT
  m/no-color[bool] => EXA_NO_COLOR
BARG

  if ${show_usage}; then
    printf 'Usage: exa [options] ...QUERY\n'
    return
  fi

  # shellcheck disable=SC2153
  local query="${QUERY[*]}"

  if ((EXA_RESULT_AMOUNT < 1)) || ((EXA_RESULT_AMOUNT > 100)); then
    log i 'Invalid amoun of results (%s), defaulting to 10' "${EXA_RESULT_AMOUNT}"
    EXA_RESULT_AMOUNT=10
  fi

  declare -A grequest=()
  grequest['query']="${query}"
  grequest['tries']="${EXA_TRIES}"
  grequest['cookies']="${EXA_COOKIES}"
  grequest['timeout']="${EXA_TIMEOUT}"
  grequest['user_agent']="${EXA_USER_AGENT}"

  # google params
  grequest['g_num']="${EXA_RESULT_AMOUNT}"

  if ! google_search grequest; then
    log e 'Failed to search google'
    return 1
  fi

  for ((i = 0; i < GOOGLE_RESULTS; i++)); do
    if [[ -t 1 ]] && ! ${EXA_NO_COLOR}; then
      printf '\x1b[38;2;255;169;140m- What: \x1b[38;2;255;232;184m%s\n' "${GOOGLE_RESULT_TITLES[i]}"
      printf '  \x1b[38;2;195;79;230mLink: \x1b[38;2;189;147;249m%s\x1b[0m\n' "${GOOGLE_RESULT_LINKS[i]}"
    else
      printf -- '- What: %s\n  Link: %s\n' "${GOOGLE_RESULT_TITLES[i]}" "${GOOGLE_RESULT_LINKS[i]}"
    fi
  done
}

main "${@}"
