#! /bin/env python3


import os
import random
import sys
import tempfile
import hashlib
import subprocess
import signal
from typing import Literal, TypeAlias
import psutil
import sqlite3
from string import ascii_lowercase
from prettytable import PrettyTable


_TBG_psutil_status: TypeAlias = Literal[
    "running",
    "sleeping",
    "disk-sleep",
    "stopped",
    "tracing-stop",
    "zombie",
    "dead",
    "wake-kill",
    "waking",
    "idle",
    "locked",
    "waiting",
    "suspended",
    "parked",
]
_TBG_status: TypeAlias = Literal[
    "running", "sleeping", "waiting", "paused", "terminated", "finished", "<none>"
]

DATABASE_FILE = os.path.join(os.environ["HOME"], ".config", "tbg.s.db")
OUTPUT_FOLDER = os.path.join(tempfile.gettempdir(), "out")


class Database:
    def __init__(self):
        conn = sqlite3.connect(DATABASE_FILE)
        c = conn.cursor()

        create_table_data = """
        CREATE TABLE IF NOT EXISTS tasks (
            pid INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            cmd_line TEXT,
            status TEXT,
            cpu REAL,
            mem REAL
        );
        """
        create_table_fifo = """
        CREATE TABLE IF NOT EXISTS tasks_out (
            pid INTEGER PRIMARY KEY,
            stdout TEXT,
            stderr TEXT
        );
        """

        c.execute(create_table_data)
        conn.commit()
        c.execute(create_table_fifo)
        conn.commit()
        self.c = c
        self.conn = conn

    def insert_task(
        self,
        data: tuple[int, str, str, _TBG_psutil_status, float, float],  # type: ignore
        fifo: tuple[int, str, str],
    ):
        insert_data, insert_fifo = (
            """
        INSERT OR REPLACE INTO tasks (pid, name, cmd_line, status, cpu, mem)
        VALUES (?, ?, ?, ?, ?, ?)
        """,
            """
        INSERT OR REPLACE INTO tasks_out (pid, stdout, stderr)
        VALUES (?, ?, ?)
        """,
        )
        # (pid, name, cmd_line, status, cpu, mem)
        self.c.execute(insert_data, data)
        self.c.execute(insert_fifo, fifo)
        self.conn.commit()

    def delete_tast(self, pid: int):
        delete_sql = """
        DELETE FROM tasks WHERE pid = ?
        DELETE FROM tasks_out WHERE pid = ?
        """
        self.c.execute(delete_sql, (pid, pid))
        self.conn.commit()

    def update_task_status(self, pid: int, status: _TBG_status):  # type: ignore
        update_sql = """
        UPDATE tasks
        SET status = ?
        WHERE pid = ?
        """

        self.c.execute(update_sql, (status, pid))
        self.conn.commit()

    def cull_tasks(self):
        finished_pids = """
        SELECT pid FROM tasks
        WHERE status NOT IN ('running','paused','waiting')
        """
        self.c.execute(finished_pids)
        pids = ", ".join([str(row[0]) for row in self.c.fetchall()])

        delete_data = f"""
        DELETE FROM tasks
        WHERE pid IN ({pids})
        """
        self.c.execute(delete_data)
        self.conn.commit()

        select_fifo = f"""
        SELECT * FROM tasks_out
        WHERE pid IN ({pids})
        """

        self.c.execute(select_fifo)
        items = [list(row) for row in self.c.fetchall()]

        delete_fifo = f"""
        DELETE FROM tasks_out
        WHERE pid IN ({pids})
        """
        self.c.execute(delete_fifo)
        self.conn.commit()

        return items

    def get_tasks(self) -> list[tuple[int, str, str, _TBG_status, float, float]]:
        select_sql = "SELECT * FROM tasks"
        self.c.execute(select_sql)
        tasks = [tuple(row) for row in self.c.fetchall()]
        return tasks

    def get_task_by_name(
        self, name: str
    ) -> list[tuple[int, str, str, _TBG_status, float, float]]:
        select_sql = """
        SELECT * FROM tasks
        WHERE name = ?
        """
        self.c.execute(select_sql, (name,))
        tasks = [tuple(row) for row in self.c.fetchall()]
        return tasks

    def get_tasks_out(self) -> list[tuple[str, str]]:
        select_sql = "SELECT * FROM tasks_out"
        self.c.execute(select_sql)
        tasks = [tuple(row) for row in self.c.fetchall()]
        return tasks

    def get_task_out(self, pid: int) -> tuple[int, str, str] | None:
        select_sql = """
        SELECT * FROM tasks_out
        WHERE pid = ?
        """
        self.c.execute(select_sql, (pid,))
        tasks = [tuple(row) for row in self.c.fetchall()]
        if len(tasks) == 0:
            return
        return tasks[0]


def generate_unique_name(min_length: int = 3, max_length: int = 8):
    length = random.randint(min_length, max_length)

    return "".join(random.choices("aeiou" + ascii_lowercase + "aeiou", k=length))


def get_process_status(pid: int) -> _TBG_status:
    try:
        process = psutil.Process(pid)
        status = process.status()

        match status:
            case psutil.STATUS_RUNNING | psutil.STATUS_IDLE:
                return "running"
            case psutil.STATUS_SLEEPING | psutil.STATUS_DISK_SLEEP:
                return "sleeping"
            case psutil.STATUS_WAKING | psutil.STATUS_LOCKED | psutil.STATUS_WAITING:
                return "waiting"
            case psutil.STATUS_PARKED:
                return "paused"
            case (
                psutil.STATUS_STOPPED
                | psutil.STATUS_TRACING_STOP
                | psutil.STATUS_ZOMBIE
                | psutil.STATUS_DEAD
            ):
                if process.parent() != psutil.Process(os.getpid()):
                    return "terminated"
            case _:
                return "<none>"

    except psutil.NoSuchProcess:
        # try:
        #     pid, status = os.waitpid(pid, os.WNOHANG)
        #     exit_code = os.WEXITSTATUS(status)
        # except ChildProcessError:
        #     return "terminated"
        # return f"terminated {exit_code:>3}"
        return "finished"
    return "<none>"


def start_command(command: list[str] | str):
    """The command to start the process. If it's a string, it will be split by space.

    Returns:
        A tuple containing the PID and the command as a list.
    """
    if isinstance(command, str):
        command = command.split()

    process = subprocess.Popen(
        command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True
    )
    pid = process.pid

    return pid, command


def stop_process(pid: int):
    """
    Stops the process with the given PID.

    Args:
        pid (int): The PID of the process to stop.
    """
    try:
        parent = psutil.Process(pid)
        children = parent.children(recursive=True)

        for child in children:
            child.kill()

        parent.kill()

    except psutil.NoSuchProcess:
        pass

    try:
        os.kill(pid, signal.SIGTERM)
    except ProcessLookupError:
        pass


def get_process_memory_usage(pid: int):
    """
    Returns the memory usage of the process with the given PID.

    Args:
        pid (int): The PID of the process.

    Returns:
        The memory usage in bytes.
    """
    process = psutil.Process(pid)
    return process.memory_info().rss


def get_process_cpu_percent(pid: int, interval: float = 1.0):
    """
    Returns the CPU percentage of the process with the given PID.

    Args:
        pid (int): The PID of the process.
        interval (float): The interval in seconds to measure the CPU usage.

    Returns:
        The CPU percentage as a float.
    """
    process = psutil.Process(pid)
    return process.cpu_percent(interval=interval)


def get_process_username(pid: int):
    """
    Returns the username of the process with the given PID.

    Args:
        pid (int): The PID of the process.

    Returns:
        The username as a string.
    """
    try:
        process = psutil.Process(pid)
        return process.username()
    except psutil.NoSuchProcess:
        return "Unknown"


def get_process_create_time(pid: int):
    """
    Returns the creation time of the process with the given PID.

    Args:
        pid (int): The PID of the process.

    Returns:
        The creation time as a float.
    """
    process = psutil.Process(pid)
    return process.create_time()


def get_process_cmdline(pid: int):
    """
    Returns the command line of the process with the given PID.

    Args:
        pid (int): The PID of the process.

    Returns:
        The command line as a list of strings.
    """
    process = psutil.Process(pid)
    return process.cmdline()


def get_process_exe(pid: int):
    """
    Returns the executable path of the process with the given PID.

    Args:
        pid (int): The PID of the process.

    Returns:
        The executable path as a string.
    """
    process = psutil.Process(pid)
    return process.exe()


def get_process_cwd(pid: int):
    """
    Returns the current working directory of the process with the given PID.

    Args:
        pid (int): The PID of the process.

    Returns:
        The current working directory as a string.
    """
    process = psutil.Process(pid)
    return process.cwd()


def get_process_open_files(pid: int):
    """
    Returns the open files of the process with the given PID.

    Args:
        pid (int): The PID of the process.

    Returns:
        A list of open files.
    """
    process = psutil.Process(pid)
    return process.open_files()


def is_process_running(pid: int) -> bool:
    try:
        os.kill(pid, 0)  # Sending signal 0 to check if process exists
        return True
    except (ProcessLookupError, FileNotFoundError):
        # Either the PID file doesn't exist or the process is not running
        return False


def start_process(command: list[str] | str) -> tuple[int, str, str]:
    """
    Starts the specified process in the background and stores the PID.

    Args:
        process_command (str): The command to execute as a background process.
        pid_file (str): The path to the temporary file to store the PID.
    """

    cmds = "".join(command)
    output = hashlib.sha256(
        "".join(random.sample(cmds, len(cmds))).encode("utf-8")
    ).hexdigest()
    stdout = os.path.join(OUTPUT_FOLDER, f"{output}.out")
    stderr = os.path.join(OUTPUT_FOLDER, f"{output}.err")
    stdoutf, stderrf = open(stdout, "wb"), open(stderr, "wb")
    try:
        process = subprocess.Popen(
            command,
            close_fds=True,
            stdout=stdoutf,
            stderr=stderrf,
        )
    except FileNotFoundError:
        print(f"Executable '{command[0]}' not found")
        sys.exit(1)
    except PermissionError:
        print(f"File '{command[0]}' is not an executable")
        sys.exit(1)
    process_pid = process.pid
    print(f"Background process with PID: {process_pid} started successfully.")
    return process_pid, stdout, stderr


def kill_process(pid: int) -> None:
    try:
        os.kill(pid, signal.SIGTERM)  # Send SIGTERM for graceful termination
        print(f"Background process with PID: {pid} terminated successfully.")
    except (ProcessLookupError, FileNotFoundError):
        print("Background process might not be running")


def get_process_info(
    pid: int, name: str, cmdline: str
) -> tuple[int, str, str, _TBG_psutil_status, float, float]:  # type: ignore
    # (pid, name, cmdline, status, cpu, mem)
    try:
        process = psutil.Process(pid)
        process_info = (
            process.pid,
            name,
            cmdline,
            process.status(),
            process.cpu_percent(),
            process.memory_percent(),
        )
    except psutil.NoSuchProcess:
        process_info = (
            pid,
            name,
            cmdline,
            "stopped",
            0.0,
            0.0,
        )

    return process_info


def list_processes(data: list[tuple[int, str, str, _TBG_status, float, float]]):
    if len(data) == 0:
        print("There are no jobs, you may want to start one before")
        return
    table = PrettyTable(
        ["ID", "PID", "Name", "Command line", "Status", "CPU %", "Mem %"],
        vertical_char="│",
        horizontal_char="─",
        junction_char="┼",
        top_junction_char="┬",
        bottom_junction_char="┴",
        right_junction_char="┤",
        left_junction_char="├",
        top_right_junction_char="╮",
        top_left_junction_char="╭",
        bottom_right_junction_char="╯",
        bottom_left_junction_char="╰",
    )
    # fmt: off
    # Here the prettytable module does not have strict types
    table.align["ID"] = "r"           # type: ignore
    table.align["PID"] = "r"          # type: ignore
    table.align["Name"] = "l"         # type: ignore
    table.align["Command line"] = "l" # type: ignore
    table.align["Status"] = "l"       # type: ignore
    for i, row in enumerate(data):
        table.add_row([i, *row]) # type: ignore
    print(table)
    # fmt: on


def print_help():
    progname = os.path.basename(sys.argv[0])
    usage_text = f"""\x1b[4mUsage:\x1b[24m {progname} \x1b[3m<operation>\x1b[0m [\x1b[2m<command> <args>\x1b[0m]

\x1b[4mOperations:\x1b[24m
    \x1b[94minit\x1b[0m -> \x1b[2mInitialize and start a new process.\x1b[0m
    \x1b[94mkill\x1b[0m -> \x1b[2mTerminate a running process by PID or name.\x1b[0m
    \x1b[94mhear\x1b[0m -> \x1b[2mRetrieve output from a finished process.\x1b[0m
    \x1b[94mcull\x1b[0m -> \x1b[2mRemove finished or invalid tasks from the database.\x1b[0m
    \x1b[94mlist\x1b[0m -> \x1b[2mList all managed processes.\x1b[0m
    \x1b[94mhelp\x1b[0m -> \x1b[2mDisplay this help message.\x1b[0m

\x1b[4mExamples:\x1b[24m
    \x1b[1m{progname} init\x1b[0m \x1b[2m[@<name>] <command> <args>\x1b[22m
    \x1b[1m{progname} kill\x1b[0m \x1b[2m<PID or name>\x1b[22m
    \x1b[1m{progname} hear\x1b[0m \x1b[2m<PID or name> [out|err]\x1b[22m
    \x1b[1m{progname} cull\x1b[0m
    \x1b[1m{progname} list\x1b[0m
    \x1b[1m{progname} help\x1b[0m
"""

    title = "Task Background Manager"
    print(f"\x1b[1m{progname} - {title}\x1b[0m\n")
    print(usage_text)


def main() -> None:
    argv = sys.argv[1:]
    if len(argv) < 1:
        print(
            f"Usage\n    {os.path.basename(sys.argv[0])} <operation> [<command> <args>]"
            f"   $ {os.path.basename(sys.argv[0])} help"
        )
        sys.exit(1)

    operation = argv[0]
    if operation not in ("init", "kill", "hear", "cull", "list", "help"):
        print(
            f"One of init, list, hear, cull, list or help was expected, got '{argv[0]}'"
        )
        sys.exit(1)
    argv = argv[1:]

    db = Database()

    match operation:
        case "init":
            if len(argv) == 0:
                print("Command and their arguments are needed")
                sys.exit(1)

            if argv[0].startswith("@") and len(argv[0]) > 1:
                pname = argv[0].lstrip("@")
                argv = argv[1:]
            else:
                pname = generate_unique_name()

            if len(argv) == 0:
                print("Command and their arguments are needed")
                sys.exit(1)
            pid, out, err = start_process(argv)
            info = get_process_info(pid, pname, " ".join(argv))
            db.insert_task(info, (pid, out, err))
        case "kill":
            if len(argv) == 0 or len(argv[0]) == 0:
                print("A PID or a name is needed")
                sys.exit(1)

            try:
                pid = int(argv[0])
            except ValueError:
                tasks = db.get_task_by_name(argv[0])
                if len(tasks) == 0:
                    print(f"No task with name {argv[0]}")
                    sys.exit(1)
                pid = tasks[0][0]

            kill_process(pid)
        case "hear":
            if len(argv) == 0 or len(argv[0]) == 0:
                print("A PID or a name is needed")
                sys.exit(1)

            try:
                pid = int(argv[0])
            except ValueError:
                tasks = db.get_task_by_name(argv[0])
                if len(tasks) == 0:
                    print(f"No task with name {argv[0]}")
                    sys.exit(1)
                pid = tasks[0][0]

            argv = argv[1:]
            task = db.get_task_out(pid)
            if task is None:
                print(f"Task {pid} was not found")
                sys.exit(1)

            if len(argv) > 0 and argv[0] == "err":
                with open(task[2], "+r", encoding="utf-8") as f:
                    print(f.read(), end="")
            else:
                with open(task[1], "+r", encoding="utf-8") as f:
                    print(f.read(), end="")

            sys.exit(0)
        case "cull":
            tasks = db.get_tasks()
            for task in tasks:
                status = get_process_status(task[0])
                db.update_task_status(task[0], status)
            tasks = db.cull_tasks()
            for task in tasks:
                if os.path.exists(task[1]):
                    os.remove(task[1])
                if os.path.exists(task[2]):
                    os.remove(task[2])
            print(f"Removed {len(tasks)} finished/invalid tasks")
            sys.exit(0)
        case "list":
            tasks = db.get_tasks()
            for task in tasks:
                status = get_process_status(task[0])
                db.update_task_status(task[0], status)
            list_processes(db.get_tasks())
            sys.exit(0)
        case "help":
            print_help()


if __name__ == "__main__":
    if not os.path.exists(OUTPUT_FOLDER):
        os.mkdir(OUTPUT_FOLDER)
    main()
