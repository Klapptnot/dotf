#! /bin/env bash

source "${HOME}/.local/lib/bash/printfc.sh"

declare -A l_cmds=(
    ["zip"]="unzip -l {:compressed:}"
    ["gz"]="gzip -l {:compressed:}"
    ["tar"]="tar -tf {:compressed:}"
    ["tar.gz"]="tar -tzf {:compressed:}"
    ["tar.bz2"]="tar -tjf {:compressed:}"
    ["tar.xz"]="tar -tJf {:compressed:}"
    ["tar.lzma"]="tar --lzma -tf {:compressed:}"
    ["tar.zst"]="tar --zstd -tf {:compressed:}"
    ["7z"]="7z l {:compressed:}"
    ["rar"]="unrar l {:compressed:}"
    ["xz"]="xz -l {:compressed:}"
    ["zst"]="zstd -l {:compressed:}"
    ["lzma"]="xz --list {:compressed:}"
    ["bz2"]="bzip2 -l {:compressed:}"
    ["lzh"]="lha l {:compressed:}"
)

declare -A e_cmds=(
    ["zip"]="unzip {:compressed:} -d {:decomp:}"
    ["gz"]="gzip -d {:compressed:} -c {:decomp:}"
    ["tar"]="tar -xf {:compressed:} -C {:decomp:}"
    ["tar.gz"]="tar -xzf {:compressed:} -C {:decomp:}"
    ["tar.bz2"]="tar -xjf {:compressed:} -C {:decomp:}"
    ["tar.xz"]="tar -xJf {:compressed:} -C {:decomp:}"
    ["tar.lzma"]="tar --lzma -xf {:compressed:} -C {:decomp:}"
    ["tar.zst"]="tar --zstd -xf {:compressed:} -C {:decomp:}"
    ["7z"]="7z x {:compressed:} -o {:decomp:}"
    ["rar"]="unrar x {:compressed:} {:decomp:}"
    ["xz"]="xz -d {:compressed:} -c | tar -xf - -C {:decomp:}"
    ["zst"]="zstd -d {:compressed:} -c | tar -xf - -C {:decomp:}"
    ["lzma"]="xz -d {:compressed:} -c | tar -xf - -C {:decomp:}"
    ["bz2"]="bzip2 -d {:compressed:} -c | tar -xf - -C {:decomp:}"
    ["lzh"]="lha e {:compressed:} {:decomp:}"
)

declare -A c_cmds=(
    ["zip"]="zip {:compressed:} {:decomp:}"
    ["gz"]="gzip {:decomp:} -c > {:compressed:}"
    ["tar"]="tar -cf {:compressed:} {:decomp:}"
    ["tar.gz"]="tar -czf {:compressed:} {:decomp:}"
    ["tar.bz2"]="tar -cjf {:compressed:} {:decomp:}"
    ["tar.xz"]="tar -cJf {:compressed:} {:decomp:}"
    ["tar.lzma"]="tar --lzma -cf {:compressed:} {:decomp:}"
    ["tar.zst"]="tar --zstd -cf {:compressed:} {:decomp:}"
    ["7z"]="7z a {:compressed:} {:decomp:}"
    ["rar"]="rar a {:compressed:} {:decomp:}"
    ["xz"]="tar -cJf {:compressed:} {:decomp:}"
    ["zst"]="tar --zstd -cf {:compressed:} {:decomp:}"
    ["lzma"]="tar --lzma -cf {:compressed:} {:decomp:}"
    ["bz2"]="tar -cjf {:compressed:} {:decomp:}"
    ["lzh"]="lha a {:compressed:} {:decomp:}"
)

function main() {
  local _local_mode='e'
  local _auto_run=false
  local _just_print=false
  case "${1}" in
    'e' | 'E' | 'extract' | 'c' | 'C' | 'compress' | 'l' | 'L' | 'list' | 'h' | 'help' | 'v' | 'version')
      _local_mode="${1}"
      shift 1
      ;;
  esac
  if [ "${#_local_mode}" -gt 1 ]; then
    _local_mode="${_local_mode:0:1}"
    _auto_run=true
  fi
  if [[ "${_local_mode}" =~ ^(E|C|L)$ ]]; then
    _local_mode="${_local_mode,,}"
    _just_print=true
  fi
  if [ "${_local_mode}" == 'v' ]; then
    printfc '{fgc.87}tared{r} - Tired of tar args, just say what you want\n\ntared v0.1 (unix-bash)\n'
    exit
  fi
  local compressed="${1}"
  local all=("${@:2}")
  if [[ "${_local_mode}" =~ ^(e|c)$ ]]; then
    if [ -z "${compressed}" ] || [ -z "${all[*]}" ]; then
      _local_mode='h'
    fi
  elif [ "${_local_mode}" == "l" ] && [ -z "${compressed}" ]; then
    _local_mode='h'
  fi

  if [[ "${_local_mode}" == 'h' ]]; then
    local help=(
      '{fgc.87}tared{r} - Tired of tar args, just say what you want\n\n'
      '\x1b[4mUsage:\x1b[24m\n'
      '  {fgc.84}tared{r} <{fgc.219}operation{r}> [{fgc.96}values{r}]\n\n'
      '  e, E, extract  <name> <folder>  - Extract <name> to folder or PWD\n'
      '  c, C, compress <name> [...]     - Compress files to <name>\n'
      '  l, L, list     <name>           - List contents of <name>\n'
      '  h, help                         - Show this message and exit\n'
      '  v, version                      - Show version and exit\n\n'
      '\x1b[4mNotes:\x1b[24m\n'
      'The compression type will be determined by the file extension, just give\n'
      'the correct arguments and it will work.\n'
      'Long operation names (ex. list) will {fgc.191}execute the command directly{r}\n'
      'short lowercase ones (ex. l) will {fgc.191}ask to run the command{r}\n'
      'short uppercase ones (ex. L) will just {fgc.191}print the command{r}\n\n'
      '\x1b[4mSupported files:\x1b[24m\n'
      '  tar, tar.{gz,xz,bz2,zst,lzma}, rar, 7z\n'
      '  zip, gz, xz, lzh, lzma, bz2, zst\n'
    )
    printfc "${help[*]}"
    exit
  fi
  local ext=(
    'tar.gz'
    'tar.xz'
    'tar.bz2'
    'tar.zst'
    'tar.lzma'
    'tar'
    'rar'
    'zip'
    '7z'
    'gz'
    'xz'
    'lzh'
    'lzma'
    'bz2'
    'zst'
  )
  local invrt_cmd=false
  local cmd=''
  for _ext in "${ext[@]}"; do
    if [[ "${compressed}" == *"${_ext}" ]]; then
      [ "${_local_mode}" == 'e' ] && cmd="${e_cmds[${_ext}]}"
      [ "${_local_mode}" == 'c' ] && cmd="${c_cmds[${_ext}]}"
      [ "${_local_mode}" == 'l' ] && cmd="${l_cmds[${_ext}]}"
      case "${_ext}" in 'gz') invrt_cmd=true ;; esac
      break
    fi
  done
  if [ -z "${cmd}" ]; then
    printfc '{fgc.202}Unsupported file {r}"%s"{fgc.202}, see:{r}\n$ {fgc.195}tared help{r}\n' "${compressed}"
    return 2
  fi
  local decomp="${all[*]}"
  local theoretical_out_dir="$(realpath ${all[0]})"

  if ${invrt_cmd}; then
    cmd="${cmd/\{:compressed:\}/${decomp}}"
    cmd="${cmd/\{:decomp:\}/${compressed}}"
  else
    cmd="${cmd/\{:decomp:\}/${decomp}}"
    cmd="${cmd/\{:compressed:\}/${compressed}}"
  fi

  if ${_just_print}; then
    printf "%s" "${cmd}"
    return 0
  fi

  if [ "${_local_mode}" == "e" ] && ! [ -d "${decomp}" ]; then
    mkdir -p "${theoretical_out_dir}"
  fi

  printfc "{fgc.87}Command{rst}  $ %s\n" "${cmd}"
  if ! "${_auto_run}"; then
    printfc '{fgc.99}Execute the command [y|*]:{r} '
    read -rn1 _do_run
    if [ "${_do_run}" != 'y' ]; then
      [ "${_do_run}" != '' ] && printf '\n'
      exit
    fi
    printf '\n'
  fi
  local _exit_code=0
  if ${cmd}; then
    printfc '{fgc.87}Command executed successfully!{r}\n'
    return 0
  else
    _exit_code="${?}"
    printfc '{fgc.160}Error in the execution of the command!{r}\n'
    return "${_exit_code}"
  fi
}

main "${@}" || exit "${?}"
