#!/usr/bin/env bash

# |>----|>----|>----|><-><|----<|----<|----<|
# |>    from Klapptnot's Hyprland setup    <|
# |>   https://github.com/Klapptnot/dotf   <|
# |>----|>----|>----|><-><|----<|----<|----<|

# Playing media info manager for Hyprlock
# image of the current playing media

# shellcheck disable=SC1090
source ~/.config/bash/lib/rsum.sh
source ~/.config/bash/lib/barg.sh
source ~/.config/bash/lib/str/markup_escape.sh
source ~/.config/bash/lib/str/uri_encode.sh

function main {
  barg.parse "${@}" << BARG || _ "${null:?Need something to do}"
  #[progname='medialock']
  #[subcmdr='true', subcmds='=artup =artdown =hwman =waybar metadata']
  #[extras='PARAM', reqextras='true']
  @metadata m/markup[bool] => MARKUP_ESCAPE || u/uri[bool] => URI_ESCAPE
BARG

  # Icon is the action to be made, not the status, except stop
  declare -A states=(
    ['playing']=""
    ['paused']=""
    ['stopped']=""
  )
  MEDIA_ART_CACHE_LOC=~/.cache/hyprland/medialock.cache

  if [ "${BARG_SUBCOMMAND}" == "artup" ]; then
    test -f "${MEDIA_ART_CACHE_LOC}" && rm "${MEDIA_ART_CACHE_LOC}" 2> /dev/null
    touch "${MEDIA_ART_CACHE_LOC}"
    media_art_cache &> /dev/null &
    return
  elif [ "${BARG_SUBCOMMAND}" == "artdown" ]; then
    test -f "${MEDIA_ART_CACHE_LOC}" && rm "${MEDIA_ART_CACHE_LOC}" 2> /dev/null
    return
  elif [ "${BARG_SUBCOMMAND}" == "hwman" ]; then
    hyprlock_mw_source_manager &> /dev/null &
    return
  elif [ "${BARG_SUBCOMMAND}" == "waybar" ]; then
    PARAM[0]='{"text": "{{title}} ~ {{artist}}", "tooltip": "Player: {{playerName}} => {{title}}", "alt": "{{statusicon}} {{elapsed}} - {{duration}}", "class": "{{status}}"}'
    MARKUP_ESCAPE=true
    URI_ESCAPE=false
  fi

  # If subcommand is `metadata`

  local res
  local what="${PARAM[0]}"
  local format_it='\{\{([a-zA-Z_]+)\}\}'
  while [[ "${what}" =~ ${format_it} ]]; do
    IFS=$'\n' read -r res < <(media_metadata_get "${BASH_REMATCH[1]}")
    what="${what//"${BASH_REMATCH[0]}"/"${res}"}"
  done

  if [ -n "${res}" ]; then
    printf '%b' "${what}"
    return
  fi

  local res_list=()
  for what in "${PARAM[@]}"; do
    if res=$(media_metadata_get "${what}"); then
      res_list+=("${res}")
    fi
  done
  printf '%s\n' "${res_list[@]}"
}

function media_art_cache {
  local last=""
  local medI=""
  while [ -f "${MEDIA_ART_CACHE_LOC}" ]; do
    if medI="$(playerctl metadata mpris:artUrl 2> /dev/null)"; then
      if [ "${last}" != "${medI}" ]; then
        cat "${medI:7}" > "${MEDIA_ART_CACHE_LOC}"
        last="${medI}"
        # Send Hyprlock signal to reload image
        if pgrep -x 'hyprlock' &> /dev/null; then
          pkill -SIGUSR2 hyprlock
        fi
      fi
    fi
    sleep 0.5
  done
}

function media_metadata_get {
  local what="${1}"
  local METAINFO="none"
  case "${what}" in
    'title' | 'artist' | 'album' | 'playerName')
      read -r METAINFO < <(playerctl -f "{{trunc(${what}, 24)}}" metadata)
      ;;
    'duration'*)
      read -r METAINFO < <(playerctl -f "{{mpris:length}}" metadata)
      METAINFO="$((METAINFO / 1000000))" # Now it's in seconds

      if [[ ! "${what}" == *"sec" ]]; then
        local MINS="$((METAINFO / 60))"
        local SECS="$((METAINFO % 60))"
        printf -v METAINFO '%d:%02d' "${MINS}" "${SECS}"
      fi
      ;;
    'elapsed'*)
      read -r METAINFO < <(playerctl position)
      METAINFO="${METAINFO%%.*}" # Now it's only seconds
      if [[ ! "${what}" == *"sec" ]]; then
        local MINS="$((METAINFO / 60))"
        local SECS="$((METAINFO % 60))"
        read -r METAINFO < <(printf '%d:%02d' "${MINS}" "${SECS}")
      fi
      ;;
    'progress'*)
      read -r METAINFO < <(playerctl -f "{{mpris:length}}" metadata)
      TOTAL="$((METAINFO / 1000000))" # Now it's in seconds
      read -r METAINFO < <(playerctl position)
      ELAPSED="$(((${METAINFO%%.*} * 100) / TOTAL))"

      if [[ "${what}" == *"bar" ]]; then
        ELAPSED="$((ELAPSED / 3))"
        local ELAPSEDR="$((33 - ELAPSED))"
        IFS=$'\n' read -r METAINFO < <(
          printf "%${ELAPSED}s" |
            tr ' ' '-' |
            printf -- "$(< /dev/stdin)%${ELAPSEDR}s"
        )
      else
        METAINFO="${ELAPSED}"
      fi
      ;;
    'status'*)
      read -r METAINFO < <(playerctl status)
      if [[ "${what}" == *"icon" ]]; then
        # Icon is the action to be made, not the status, except stop
        METAINFO="${states[${METAINFO,,}]}"
      else
        METAINFO="${METAINFO,,}"
      fi
      ;;
    *)
      return 1
      ;;
  esac
  if ${MARKUP_ESCAPE}; then
    read -r METAINFO < <(str.markup_escape <<< "${METAINFO}")
  elif ${URI_ESCAPE}; then
    read -r METAINFO < <(str.uri_encode <<< "${METAINFO}")
  fi
  printf '%s' "${METAINFO}"
}

function hyprlock_mw_source_manager {
  local csrc_str='^# source = ~/\.config/hypr/conf\.d/medialock\.conf$'
  local usrc_str='^source = ~/\.config/hypr/conf\.d/medialock\.conf$'
  local toggle_file="${HOME}/.cache/hyprland/medialock.conf"
  while true; do
    read -r media_session_status < <(playerctl status 2> >(sed 's/^/[playerctl::stderr] /' >&2))
    if
      [ "${media_session_status}" != "Stopped" ] &&
        [ -n "${media_session_status}" ] &&
        grep -qP "${csrc_str}" "${toggle_file}"
    then
      # Uncomment source, reload
      sed -i '/^#__medialock__/{n; s/^# //; }' "${toggle_file}"
      pgrep -x 'hyprlock' &> /dev/null && pkill -SIGUSR2 hyprlock
    elif
      [ -z "${media_session_status}" ] ||
        [ "${media_session_status}" == "Stopped" ] &&
        grep -qP "${usrc_str}" "${toggle_file}"
    then
      # Comment source, reload
      sed -i '/^#__medialock__/{n; s/^\([^#]\)/# \1/; }' "${toggle_file}"
      pgrep -x 'hyprlock' &> /dev/null && pkill -SIGUSR2 hyprlock
    fi
    sleep 1
  done
}

main "${@}"
